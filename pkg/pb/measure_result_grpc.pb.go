// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MeasureResultManagerClient is the client API for MeasureResultManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeasureResultManagerClient interface {
	CreateMeasureResult(ctx context.Context, in *CreateMeasureResultRequest, opts ...grpc.CallOption) (*MeasureResult, error)
	GetMeasureResult(ctx context.Context, in *GetMeasureResultRequest, opts ...grpc.CallOption) (*MeasureResult, error)
	UpdateMeasureResult(ctx context.Context, in *UpdateMeasureResultRequest, opts ...grpc.CallOption) (*MeasureResult, error)
	DeleteMeasureResult(ctx context.Context, in *DeleteMeasureResultRequest, opts ...grpc.CallOption) (*MeasureResult, error)
	GetMeasureResults(ctx context.Context, in *GetMeasureResultsRequest, opts ...grpc.CallOption) (*GetMeasureResultsReply, error)
}

type measureResultManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewMeasureResultManagerClient(cc grpc.ClientConnInterface) MeasureResultManagerClient {
	return &measureResultManagerClient{cc}
}

func (c *measureResultManagerClient) CreateMeasureResult(ctx context.Context, in *CreateMeasureResultRequest, opts ...grpc.CallOption) (*MeasureResult, error) {
	out := new(MeasureResult)
	err := c.cc.Invoke(ctx, "/pb.MeasureResultManager/CreateMeasureResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *measureResultManagerClient) GetMeasureResult(ctx context.Context, in *GetMeasureResultRequest, opts ...grpc.CallOption) (*MeasureResult, error) {
	out := new(MeasureResult)
	err := c.cc.Invoke(ctx, "/pb.MeasureResultManager/GetMeasureResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *measureResultManagerClient) UpdateMeasureResult(ctx context.Context, in *UpdateMeasureResultRequest, opts ...grpc.CallOption) (*MeasureResult, error) {
	out := new(MeasureResult)
	err := c.cc.Invoke(ctx, "/pb.MeasureResultManager/UpdateMeasureResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *measureResultManagerClient) DeleteMeasureResult(ctx context.Context, in *DeleteMeasureResultRequest, opts ...grpc.CallOption) (*MeasureResult, error) {
	out := new(MeasureResult)
	err := c.cc.Invoke(ctx, "/pb.MeasureResultManager/DeleteMeasureResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *measureResultManagerClient) GetMeasureResults(ctx context.Context, in *GetMeasureResultsRequest, opts ...grpc.CallOption) (*GetMeasureResultsReply, error) {
	out := new(GetMeasureResultsReply)
	err := c.cc.Invoke(ctx, "/pb.MeasureResultManager/GetMeasureResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeasureResultManagerServer is the server API for MeasureResultManager service.
// All implementations must embed UnimplementedMeasureResultManagerServer
// for forward compatibility
type MeasureResultManagerServer interface {
	CreateMeasureResult(context.Context, *CreateMeasureResultRequest) (*MeasureResult, error)
	GetMeasureResult(context.Context, *GetMeasureResultRequest) (*MeasureResult, error)
	UpdateMeasureResult(context.Context, *UpdateMeasureResultRequest) (*MeasureResult, error)
	DeleteMeasureResult(context.Context, *DeleteMeasureResultRequest) (*MeasureResult, error)
	GetMeasureResults(context.Context, *GetMeasureResultsRequest) (*GetMeasureResultsReply, error)
	mustEmbedUnimplementedMeasureResultManagerServer()
}

// UnimplementedMeasureResultManagerServer must be embedded to have forward compatible implementations.
type UnimplementedMeasureResultManagerServer struct {
}

func (UnimplementedMeasureResultManagerServer) CreateMeasureResult(context.Context, *CreateMeasureResultRequest) (*MeasureResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeasureResult not implemented")
}
func (UnimplementedMeasureResultManagerServer) GetMeasureResult(context.Context, *GetMeasureResultRequest) (*MeasureResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeasureResult not implemented")
}
func (UnimplementedMeasureResultManagerServer) UpdateMeasureResult(context.Context, *UpdateMeasureResultRequest) (*MeasureResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMeasureResult not implemented")
}
func (UnimplementedMeasureResultManagerServer) DeleteMeasureResult(context.Context, *DeleteMeasureResultRequest) (*MeasureResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMeasureResult not implemented")
}
func (UnimplementedMeasureResultManagerServer) GetMeasureResults(context.Context, *GetMeasureResultsRequest) (*GetMeasureResultsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeasureResults not implemented")
}
func (UnimplementedMeasureResultManagerServer) mustEmbedUnimplementedMeasureResultManagerServer() {}

// UnsafeMeasureResultManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeasureResultManagerServer will
// result in compilation errors.
type UnsafeMeasureResultManagerServer interface {
	mustEmbedUnimplementedMeasureResultManagerServer()
}

func RegisterMeasureResultManagerServer(s grpc.ServiceRegistrar, srv MeasureResultManagerServer) {
	s.RegisterService(&MeasureResultManager_ServiceDesc, srv)
}

func _MeasureResultManager_CreateMeasureResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMeasureResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeasureResultManagerServer).CreateMeasureResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MeasureResultManager/CreateMeasureResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeasureResultManagerServer).CreateMeasureResult(ctx, req.(*CreateMeasureResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeasureResultManager_GetMeasureResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeasureResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeasureResultManagerServer).GetMeasureResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MeasureResultManager/GetMeasureResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeasureResultManagerServer).GetMeasureResult(ctx, req.(*GetMeasureResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeasureResultManager_UpdateMeasureResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMeasureResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeasureResultManagerServer).UpdateMeasureResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MeasureResultManager/UpdateMeasureResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeasureResultManagerServer).UpdateMeasureResult(ctx, req.(*UpdateMeasureResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeasureResultManager_DeleteMeasureResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMeasureResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeasureResultManagerServer).DeleteMeasureResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MeasureResultManager/DeleteMeasureResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeasureResultManagerServer).DeleteMeasureResult(ctx, req.(*DeleteMeasureResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeasureResultManager_GetMeasureResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeasureResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeasureResultManagerServer).GetMeasureResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MeasureResultManager/GetMeasureResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeasureResultManagerServer).GetMeasureResults(ctx, req.(*GetMeasureResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MeasureResultManager_ServiceDesc is the grpc.ServiceDesc for MeasureResultManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeasureResultManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MeasureResultManager",
	HandlerType: (*MeasureResultManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMeasureResult",
			Handler:    _MeasureResultManager_CreateMeasureResult_Handler,
		},
		{
			MethodName: "GetMeasureResult",
			Handler:    _MeasureResultManager_GetMeasureResult_Handler,
		},
		{
			MethodName: "UpdateMeasureResult",
			Handler:    _MeasureResultManager_UpdateMeasureResult_Handler,
		},
		{
			MethodName: "DeleteMeasureResult",
			Handler:    _MeasureResultManager_DeleteMeasureResult_Handler,
		},
		{
			MethodName: "GetMeasureResults",
			Handler:    _MeasureResultManager_GetMeasureResults_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "measure_result.proto",
}
