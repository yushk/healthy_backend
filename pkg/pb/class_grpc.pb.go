// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClassManagerClient is the client API for ClassManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClassManagerClient interface {
	CreateClass(ctx context.Context, in *CreateClassRequest, opts ...grpc.CallOption) (*Class, error)
	GetClass(ctx context.Context, in *GetClassRequest, opts ...grpc.CallOption) (*Class, error)
	UpdateClass(ctx context.Context, in *UpdateClassRequest, opts ...grpc.CallOption) (*Class, error)
	DeleteClass(ctx context.Context, in *DeleteClassRequest, opts ...grpc.CallOption) (*Class, error)
	GetClasses(ctx context.Context, in *GetClassesRequest, opts ...grpc.CallOption) (*GetClassesReply, error)
}

type classManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewClassManagerClient(cc grpc.ClientConnInterface) ClassManagerClient {
	return &classManagerClient{cc}
}

func (c *classManagerClient) CreateClass(ctx context.Context, in *CreateClassRequest, opts ...grpc.CallOption) (*Class, error) {
	out := new(Class)
	err := c.cc.Invoke(ctx, "/pb.ClassManager/CreateClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classManagerClient) GetClass(ctx context.Context, in *GetClassRequest, opts ...grpc.CallOption) (*Class, error) {
	out := new(Class)
	err := c.cc.Invoke(ctx, "/pb.ClassManager/GetClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classManagerClient) UpdateClass(ctx context.Context, in *UpdateClassRequest, opts ...grpc.CallOption) (*Class, error) {
	out := new(Class)
	err := c.cc.Invoke(ctx, "/pb.ClassManager/UpdateClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classManagerClient) DeleteClass(ctx context.Context, in *DeleteClassRequest, opts ...grpc.CallOption) (*Class, error) {
	out := new(Class)
	err := c.cc.Invoke(ctx, "/pb.ClassManager/DeleteClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classManagerClient) GetClasses(ctx context.Context, in *GetClassesRequest, opts ...grpc.CallOption) (*GetClassesReply, error) {
	out := new(GetClassesReply)
	err := c.cc.Invoke(ctx, "/pb.ClassManager/GetClasses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClassManagerServer is the server API for ClassManager service.
// All implementations must embed UnimplementedClassManagerServer
// for forward compatibility
type ClassManagerServer interface {
	CreateClass(context.Context, *CreateClassRequest) (*Class, error)
	GetClass(context.Context, *GetClassRequest) (*Class, error)
	UpdateClass(context.Context, *UpdateClassRequest) (*Class, error)
	DeleteClass(context.Context, *DeleteClassRequest) (*Class, error)
	GetClasses(context.Context, *GetClassesRequest) (*GetClassesReply, error)
	mustEmbedUnimplementedClassManagerServer()
}

// UnimplementedClassManagerServer must be embedded to have forward compatible implementations.
type UnimplementedClassManagerServer struct {
}

func (UnimplementedClassManagerServer) CreateClass(context.Context, *CreateClassRequest) (*Class, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClass not implemented")
}
func (UnimplementedClassManagerServer) GetClass(context.Context, *GetClassRequest) (*Class, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClass not implemented")
}
func (UnimplementedClassManagerServer) UpdateClass(context.Context, *UpdateClassRequest) (*Class, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClass not implemented")
}
func (UnimplementedClassManagerServer) DeleteClass(context.Context, *DeleteClassRequest) (*Class, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClass not implemented")
}
func (UnimplementedClassManagerServer) GetClasses(context.Context, *GetClassesRequest) (*GetClassesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClasses not implemented")
}
func (UnimplementedClassManagerServer) mustEmbedUnimplementedClassManagerServer() {}

// UnsafeClassManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClassManagerServer will
// result in compilation errors.
type UnsafeClassManagerServer interface {
	mustEmbedUnimplementedClassManagerServer()
}

func RegisterClassManagerServer(s grpc.ServiceRegistrar, srv ClassManagerServer) {
	s.RegisterService(&ClassManager_ServiceDesc, srv)
}

func _ClassManager_CreateClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassManagerServer).CreateClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ClassManager/CreateClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassManagerServer).CreateClass(ctx, req.(*CreateClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassManager_GetClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassManagerServer).GetClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ClassManager/GetClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassManagerServer).GetClass(ctx, req.(*GetClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassManager_UpdateClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassManagerServer).UpdateClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ClassManager/UpdateClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassManagerServer).UpdateClass(ctx, req.(*UpdateClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassManager_DeleteClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassManagerServer).DeleteClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ClassManager/DeleteClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassManagerServer).DeleteClass(ctx, req.(*DeleteClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassManager_GetClasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClassesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassManagerServer).GetClasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ClassManager/GetClasses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassManagerServer).GetClasses(ctx, req.(*GetClassesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClassManager_ServiceDesc is the grpc.ServiceDesc for ClassManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClassManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ClassManager",
	HandlerType: (*ClassManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClass",
			Handler:    _ClassManager_CreateClass_Handler,
		},
		{
			MethodName: "GetClass",
			Handler:    _ClassManager_GetClass_Handler,
		},
		{
			MethodName: "UpdateClass",
			Handler:    _ClassManager_UpdateClass_Handler,
		},
		{
			MethodName: "DeleteClass",
			Handler:    _ClassManager_DeleteClass_Handler,
		},
		{
			MethodName: "GetClasses",
			Handler:    _ClassManager_GetClasses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "class.proto",
}
