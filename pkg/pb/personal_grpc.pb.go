// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PersonalManagerClient is the client API for PersonalManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonalManagerClient interface {
	CreatePersonal(ctx context.Context, in *CreatePersonalRequest, opts ...grpc.CallOption) (*Personal, error)
	GetPersonal(ctx context.Context, in *GetPersonalRequest, opts ...grpc.CallOption) (*Personal, error)
	UpdatePersonal(ctx context.Context, in *UpdatePersonalRequest, opts ...grpc.CallOption) (*Personal, error)
	DeletePersonal(ctx context.Context, in *DeletePersonalRequest, opts ...grpc.CallOption) (*Personal, error)
	GetPersonals(ctx context.Context, in *GetPersonalsRequest, opts ...grpc.CallOption) (*GetPersonalsReply, error)
}

type personalManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonalManagerClient(cc grpc.ClientConnInterface) PersonalManagerClient {
	return &personalManagerClient{cc}
}

func (c *personalManagerClient) CreatePersonal(ctx context.Context, in *CreatePersonalRequest, opts ...grpc.CallOption) (*Personal, error) {
	out := new(Personal)
	err := c.cc.Invoke(ctx, "/pb.PersonalManager/CreatePersonal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalManagerClient) GetPersonal(ctx context.Context, in *GetPersonalRequest, opts ...grpc.CallOption) (*Personal, error) {
	out := new(Personal)
	err := c.cc.Invoke(ctx, "/pb.PersonalManager/GetPersonal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalManagerClient) UpdatePersonal(ctx context.Context, in *UpdatePersonalRequest, opts ...grpc.CallOption) (*Personal, error) {
	out := new(Personal)
	err := c.cc.Invoke(ctx, "/pb.PersonalManager/UpdatePersonal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalManagerClient) DeletePersonal(ctx context.Context, in *DeletePersonalRequest, opts ...grpc.CallOption) (*Personal, error) {
	out := new(Personal)
	err := c.cc.Invoke(ctx, "/pb.PersonalManager/DeletePersonal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalManagerClient) GetPersonals(ctx context.Context, in *GetPersonalsRequest, opts ...grpc.CallOption) (*GetPersonalsReply, error) {
	out := new(GetPersonalsReply)
	err := c.cc.Invoke(ctx, "/pb.PersonalManager/GetPersonals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonalManagerServer is the server API for PersonalManager service.
// All implementations must embed UnimplementedPersonalManagerServer
// for forward compatibility
type PersonalManagerServer interface {
	CreatePersonal(context.Context, *CreatePersonalRequest) (*Personal, error)
	GetPersonal(context.Context, *GetPersonalRequest) (*Personal, error)
	UpdatePersonal(context.Context, *UpdatePersonalRequest) (*Personal, error)
	DeletePersonal(context.Context, *DeletePersonalRequest) (*Personal, error)
	GetPersonals(context.Context, *GetPersonalsRequest) (*GetPersonalsReply, error)
	mustEmbedUnimplementedPersonalManagerServer()
}

// UnimplementedPersonalManagerServer must be embedded to have forward compatible implementations.
type UnimplementedPersonalManagerServer struct {
}

func (UnimplementedPersonalManagerServer) CreatePersonal(context.Context, *CreatePersonalRequest) (*Personal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePersonal not implemented")
}
func (UnimplementedPersonalManagerServer) GetPersonal(context.Context, *GetPersonalRequest) (*Personal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonal not implemented")
}
func (UnimplementedPersonalManagerServer) UpdatePersonal(context.Context, *UpdatePersonalRequest) (*Personal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePersonal not implemented")
}
func (UnimplementedPersonalManagerServer) DeletePersonal(context.Context, *DeletePersonalRequest) (*Personal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePersonal not implemented")
}
func (UnimplementedPersonalManagerServer) GetPersonals(context.Context, *GetPersonalsRequest) (*GetPersonalsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonals not implemented")
}
func (UnimplementedPersonalManagerServer) mustEmbedUnimplementedPersonalManagerServer() {}

// UnsafePersonalManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonalManagerServer will
// result in compilation errors.
type UnsafePersonalManagerServer interface {
	mustEmbedUnimplementedPersonalManagerServer()
}

func RegisterPersonalManagerServer(s grpc.ServiceRegistrar, srv PersonalManagerServer) {
	s.RegisterService(&PersonalManager_ServiceDesc, srv)
}

func _PersonalManager_CreatePersonal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePersonalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalManagerServer).CreatePersonal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PersonalManager/CreatePersonal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalManagerServer).CreatePersonal(ctx, req.(*CreatePersonalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalManager_GetPersonal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalManagerServer).GetPersonal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PersonalManager/GetPersonal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalManagerServer).GetPersonal(ctx, req.(*GetPersonalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalManager_UpdatePersonal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePersonalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalManagerServer).UpdatePersonal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PersonalManager/UpdatePersonal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalManagerServer).UpdatePersonal(ctx, req.(*UpdatePersonalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalManager_DeletePersonal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePersonalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalManagerServer).DeletePersonal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PersonalManager/DeletePersonal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalManagerServer).DeletePersonal(ctx, req.(*DeletePersonalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalManager_GetPersonals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalManagerServer).GetPersonals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PersonalManager/GetPersonals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalManagerServer).GetPersonals(ctx, req.(*GetPersonalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PersonalManager_ServiceDesc is the grpc.ServiceDesc for PersonalManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonalManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PersonalManager",
	HandlerType: (*PersonalManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePersonal",
			Handler:    _PersonalManager_CreatePersonal_Handler,
		},
		{
			MethodName: "GetPersonal",
			Handler:    _PersonalManager_GetPersonal_Handler,
		},
		{
			MethodName: "UpdatePersonal",
			Handler:    _PersonalManager_UpdatePersonal_Handler,
		},
		{
			MethodName: "DeletePersonal",
			Handler:    _PersonalManager_DeletePersonal_Handler,
		},
		{
			MethodName: "GetPersonals",
			Handler:    _PersonalManager_GetPersonals_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "personal.proto",
}
