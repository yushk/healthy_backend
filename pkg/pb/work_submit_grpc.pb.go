// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkSubmitManagerClient is the client API for WorkSubmitManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkSubmitManagerClient interface {
	CreateWorkSubmit(ctx context.Context, in *CreateWorkSubmitRequest, opts ...grpc.CallOption) (*WorkSubmit, error)
	GetWorkSubmit(ctx context.Context, in *GetWorkSubmitRequest, opts ...grpc.CallOption) (*WorkSubmit, error)
	UpdateWorkSubmit(ctx context.Context, in *UpdateWorkSubmitRequest, opts ...grpc.CallOption) (*WorkSubmit, error)
	DeleteWorkSubmit(ctx context.Context, in *DeleteWorkSubmitRequest, opts ...grpc.CallOption) (*WorkSubmit, error)
	GetWorkSubmits(ctx context.Context, in *GetWorkSubmitsRequest, opts ...grpc.CallOption) (*GetWorkSubmitsReply, error)
}

type workSubmitManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkSubmitManagerClient(cc grpc.ClientConnInterface) WorkSubmitManagerClient {
	return &workSubmitManagerClient{cc}
}

func (c *workSubmitManagerClient) CreateWorkSubmit(ctx context.Context, in *CreateWorkSubmitRequest, opts ...grpc.CallOption) (*WorkSubmit, error) {
	out := new(WorkSubmit)
	err := c.cc.Invoke(ctx, "/pb.WorkSubmitManager/CreateWorkSubmit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workSubmitManagerClient) GetWorkSubmit(ctx context.Context, in *GetWorkSubmitRequest, opts ...grpc.CallOption) (*WorkSubmit, error) {
	out := new(WorkSubmit)
	err := c.cc.Invoke(ctx, "/pb.WorkSubmitManager/GetWorkSubmit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workSubmitManagerClient) UpdateWorkSubmit(ctx context.Context, in *UpdateWorkSubmitRequest, opts ...grpc.CallOption) (*WorkSubmit, error) {
	out := new(WorkSubmit)
	err := c.cc.Invoke(ctx, "/pb.WorkSubmitManager/UpdateWorkSubmit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workSubmitManagerClient) DeleteWorkSubmit(ctx context.Context, in *DeleteWorkSubmitRequest, opts ...grpc.CallOption) (*WorkSubmit, error) {
	out := new(WorkSubmit)
	err := c.cc.Invoke(ctx, "/pb.WorkSubmitManager/DeleteWorkSubmit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workSubmitManagerClient) GetWorkSubmits(ctx context.Context, in *GetWorkSubmitsRequest, opts ...grpc.CallOption) (*GetWorkSubmitsReply, error) {
	out := new(GetWorkSubmitsReply)
	err := c.cc.Invoke(ctx, "/pb.WorkSubmitManager/GetWorkSubmits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkSubmitManagerServer is the server API for WorkSubmitManager service.
// All implementations must embed UnimplementedWorkSubmitManagerServer
// for forward compatibility
type WorkSubmitManagerServer interface {
	CreateWorkSubmit(context.Context, *CreateWorkSubmitRequest) (*WorkSubmit, error)
	GetWorkSubmit(context.Context, *GetWorkSubmitRequest) (*WorkSubmit, error)
	UpdateWorkSubmit(context.Context, *UpdateWorkSubmitRequest) (*WorkSubmit, error)
	DeleteWorkSubmit(context.Context, *DeleteWorkSubmitRequest) (*WorkSubmit, error)
	GetWorkSubmits(context.Context, *GetWorkSubmitsRequest) (*GetWorkSubmitsReply, error)
	mustEmbedUnimplementedWorkSubmitManagerServer()
}

// UnimplementedWorkSubmitManagerServer must be embedded to have forward compatible implementations.
type UnimplementedWorkSubmitManagerServer struct {
}

func (UnimplementedWorkSubmitManagerServer) CreateWorkSubmit(context.Context, *CreateWorkSubmitRequest) (*WorkSubmit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkSubmit not implemented")
}
func (UnimplementedWorkSubmitManagerServer) GetWorkSubmit(context.Context, *GetWorkSubmitRequest) (*WorkSubmit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkSubmit not implemented")
}
func (UnimplementedWorkSubmitManagerServer) UpdateWorkSubmit(context.Context, *UpdateWorkSubmitRequest) (*WorkSubmit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkSubmit not implemented")
}
func (UnimplementedWorkSubmitManagerServer) DeleteWorkSubmit(context.Context, *DeleteWorkSubmitRequest) (*WorkSubmit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkSubmit not implemented")
}
func (UnimplementedWorkSubmitManagerServer) GetWorkSubmits(context.Context, *GetWorkSubmitsRequest) (*GetWorkSubmitsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkSubmits not implemented")
}
func (UnimplementedWorkSubmitManagerServer) mustEmbedUnimplementedWorkSubmitManagerServer() {}

// UnsafeWorkSubmitManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkSubmitManagerServer will
// result in compilation errors.
type UnsafeWorkSubmitManagerServer interface {
	mustEmbedUnimplementedWorkSubmitManagerServer()
}

func RegisterWorkSubmitManagerServer(s grpc.ServiceRegistrar, srv WorkSubmitManagerServer) {
	s.RegisterService(&WorkSubmitManager_ServiceDesc, srv)
}

func _WorkSubmitManager_CreateWorkSubmit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkSubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSubmitManagerServer).CreateWorkSubmit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WorkSubmitManager/CreateWorkSubmit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSubmitManagerServer).CreateWorkSubmit(ctx, req.(*CreateWorkSubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkSubmitManager_GetWorkSubmit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkSubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSubmitManagerServer).GetWorkSubmit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WorkSubmitManager/GetWorkSubmit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSubmitManagerServer).GetWorkSubmit(ctx, req.(*GetWorkSubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkSubmitManager_UpdateWorkSubmit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkSubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSubmitManagerServer).UpdateWorkSubmit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WorkSubmitManager/UpdateWorkSubmit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSubmitManagerServer).UpdateWorkSubmit(ctx, req.(*UpdateWorkSubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkSubmitManager_DeleteWorkSubmit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkSubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSubmitManagerServer).DeleteWorkSubmit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WorkSubmitManager/DeleteWorkSubmit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSubmitManagerServer).DeleteWorkSubmit(ctx, req.(*DeleteWorkSubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkSubmitManager_GetWorkSubmits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkSubmitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSubmitManagerServer).GetWorkSubmits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WorkSubmitManager/GetWorkSubmits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSubmitManagerServer).GetWorkSubmits(ctx, req.(*GetWorkSubmitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkSubmitManager_ServiceDesc is the grpc.ServiceDesc for WorkSubmitManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkSubmitManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.WorkSubmitManager",
	HandlerType: (*WorkSubmitManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWorkSubmit",
			Handler:    _WorkSubmitManager_CreateWorkSubmit_Handler,
		},
		{
			MethodName: "GetWorkSubmit",
			Handler:    _WorkSubmitManager_GetWorkSubmit_Handler,
		},
		{
			MethodName: "UpdateWorkSubmit",
			Handler:    _WorkSubmitManager_UpdateWorkSubmit_Handler,
		},
		{
			MethodName: "DeleteWorkSubmit",
			Handler:    _WorkSubmitManager_DeleteWorkSubmit_Handler,
		},
		{
			MethodName: "GetWorkSubmits",
			Handler:    _WorkSubmitManager_GetWorkSubmits_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "work_submit.proto",
}
