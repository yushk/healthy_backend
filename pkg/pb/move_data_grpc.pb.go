// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MoveDataManagerClient is the client API for MoveDataManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MoveDataManagerClient interface {
	CreateMoveData(ctx context.Context, in *CreateMoveDataRequest, opts ...grpc.CallOption) (*MoveData, error)
	GetMoveData(ctx context.Context, in *GetMoveDataRequest, opts ...grpc.CallOption) (*MoveData, error)
	UpdateMoveData(ctx context.Context, in *UpdateMoveDataRequest, opts ...grpc.CallOption) (*MoveData, error)
	DeleteMoveData(ctx context.Context, in *DeleteMoveDataRequest, opts ...grpc.CallOption) (*MoveData, error)
	GetMoveDatas(ctx context.Context, in *GetMoveDatasRequest, opts ...grpc.CallOption) (*GetMoveDatasReply, error)
}

type moveDataManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewMoveDataManagerClient(cc grpc.ClientConnInterface) MoveDataManagerClient {
	return &moveDataManagerClient{cc}
}

func (c *moveDataManagerClient) CreateMoveData(ctx context.Context, in *CreateMoveDataRequest, opts ...grpc.CallOption) (*MoveData, error) {
	out := new(MoveData)
	err := c.cc.Invoke(ctx, "/pb.MoveDataManager/CreateMoveData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moveDataManagerClient) GetMoveData(ctx context.Context, in *GetMoveDataRequest, opts ...grpc.CallOption) (*MoveData, error) {
	out := new(MoveData)
	err := c.cc.Invoke(ctx, "/pb.MoveDataManager/GetMoveData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moveDataManagerClient) UpdateMoveData(ctx context.Context, in *UpdateMoveDataRequest, opts ...grpc.CallOption) (*MoveData, error) {
	out := new(MoveData)
	err := c.cc.Invoke(ctx, "/pb.MoveDataManager/UpdateMoveData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moveDataManagerClient) DeleteMoveData(ctx context.Context, in *DeleteMoveDataRequest, opts ...grpc.CallOption) (*MoveData, error) {
	out := new(MoveData)
	err := c.cc.Invoke(ctx, "/pb.MoveDataManager/DeleteMoveData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moveDataManagerClient) GetMoveDatas(ctx context.Context, in *GetMoveDatasRequest, opts ...grpc.CallOption) (*GetMoveDatasReply, error) {
	out := new(GetMoveDatasReply)
	err := c.cc.Invoke(ctx, "/pb.MoveDataManager/GetMoveDatas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoveDataManagerServer is the server API for MoveDataManager service.
// All implementations must embed UnimplementedMoveDataManagerServer
// for forward compatibility
type MoveDataManagerServer interface {
	CreateMoveData(context.Context, *CreateMoveDataRequest) (*MoveData, error)
	GetMoveData(context.Context, *GetMoveDataRequest) (*MoveData, error)
	UpdateMoveData(context.Context, *UpdateMoveDataRequest) (*MoveData, error)
	DeleteMoveData(context.Context, *DeleteMoveDataRequest) (*MoveData, error)
	GetMoveDatas(context.Context, *GetMoveDatasRequest) (*GetMoveDatasReply, error)
	mustEmbedUnimplementedMoveDataManagerServer()
}

// UnimplementedMoveDataManagerServer must be embedded to have forward compatible implementations.
type UnimplementedMoveDataManagerServer struct {
}

func (UnimplementedMoveDataManagerServer) CreateMoveData(context.Context, *CreateMoveDataRequest) (*MoveData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMoveData not implemented")
}
func (UnimplementedMoveDataManagerServer) GetMoveData(context.Context, *GetMoveDataRequest) (*MoveData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMoveData not implemented")
}
func (UnimplementedMoveDataManagerServer) UpdateMoveData(context.Context, *UpdateMoveDataRequest) (*MoveData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMoveData not implemented")
}
func (UnimplementedMoveDataManagerServer) DeleteMoveData(context.Context, *DeleteMoveDataRequest) (*MoveData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMoveData not implemented")
}
func (UnimplementedMoveDataManagerServer) GetMoveDatas(context.Context, *GetMoveDatasRequest) (*GetMoveDatasReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMoveDatas not implemented")
}
func (UnimplementedMoveDataManagerServer) mustEmbedUnimplementedMoveDataManagerServer() {}

// UnsafeMoveDataManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MoveDataManagerServer will
// result in compilation errors.
type UnsafeMoveDataManagerServer interface {
	mustEmbedUnimplementedMoveDataManagerServer()
}

func RegisterMoveDataManagerServer(s grpc.ServiceRegistrar, srv MoveDataManagerServer) {
	s.RegisterService(&MoveDataManager_ServiceDesc, srv)
}

func _MoveDataManager_CreateMoveData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMoveDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoveDataManagerServer).CreateMoveData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MoveDataManager/CreateMoveData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoveDataManagerServer).CreateMoveData(ctx, req.(*CreateMoveDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoveDataManager_GetMoveData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMoveDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoveDataManagerServer).GetMoveData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MoveDataManager/GetMoveData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoveDataManagerServer).GetMoveData(ctx, req.(*GetMoveDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoveDataManager_UpdateMoveData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMoveDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoveDataManagerServer).UpdateMoveData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MoveDataManager/UpdateMoveData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoveDataManagerServer).UpdateMoveData(ctx, req.(*UpdateMoveDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoveDataManager_DeleteMoveData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMoveDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoveDataManagerServer).DeleteMoveData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MoveDataManager/DeleteMoveData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoveDataManagerServer).DeleteMoveData(ctx, req.(*DeleteMoveDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoveDataManager_GetMoveDatas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMoveDatasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoveDataManagerServer).GetMoveDatas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MoveDataManager/GetMoveDatas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoveDataManagerServer).GetMoveDatas(ctx, req.(*GetMoveDatasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MoveDataManager_ServiceDesc is the grpc.ServiceDesc for MoveDataManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MoveDataManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MoveDataManager",
	HandlerType: (*MoveDataManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMoveData",
			Handler:    _MoveDataManager_CreateMoveData_Handler,
		},
		{
			MethodName: "GetMoveData",
			Handler:    _MoveDataManager_GetMoveData_Handler,
		},
		{
			MethodName: "UpdateMoveData",
			Handler:    _MoveDataManager_UpdateMoveData_Handler,
		},
		{
			MethodName: "DeleteMoveData",
			Handler:    _MoveDataManager_DeleteMoveData_Handler,
		},
		{
			MethodName: "GetMoveDatas",
			Handler:    _MoveDataManager_GetMoveDatas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "move_data.proto",
}
