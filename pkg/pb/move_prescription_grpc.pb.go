// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MovePrescriptionManagerClient is the client API for MovePrescriptionManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovePrescriptionManagerClient interface {
	CreateMovePrescription(ctx context.Context, in *CreateMovePrescriptionRequest, opts ...grpc.CallOption) (*MovePrescription, error)
	GetMovePrescription(ctx context.Context, in *GetMovePrescriptionRequest, opts ...grpc.CallOption) (*MovePrescription, error)
	UpdateMovePrescription(ctx context.Context, in *UpdateMovePrescriptionRequest, opts ...grpc.CallOption) (*MovePrescription, error)
	DeleteMovePrescription(ctx context.Context, in *DeleteMovePrescriptionRequest, opts ...grpc.CallOption) (*MovePrescription, error)
	GetMovePrescriptions(ctx context.Context, in *GetMovePrescriptionsRequest, opts ...grpc.CallOption) (*GetMovePrescriptionsReply, error)
}

type movePrescriptionManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewMovePrescriptionManagerClient(cc grpc.ClientConnInterface) MovePrescriptionManagerClient {
	return &movePrescriptionManagerClient{cc}
}

func (c *movePrescriptionManagerClient) CreateMovePrescription(ctx context.Context, in *CreateMovePrescriptionRequest, opts ...grpc.CallOption) (*MovePrescription, error) {
	out := new(MovePrescription)
	err := c.cc.Invoke(ctx, "/pb.MovePrescriptionManager/CreateMovePrescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movePrescriptionManagerClient) GetMovePrescription(ctx context.Context, in *GetMovePrescriptionRequest, opts ...grpc.CallOption) (*MovePrescription, error) {
	out := new(MovePrescription)
	err := c.cc.Invoke(ctx, "/pb.MovePrescriptionManager/GetMovePrescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movePrescriptionManagerClient) UpdateMovePrescription(ctx context.Context, in *UpdateMovePrescriptionRequest, opts ...grpc.CallOption) (*MovePrescription, error) {
	out := new(MovePrescription)
	err := c.cc.Invoke(ctx, "/pb.MovePrescriptionManager/UpdateMovePrescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movePrescriptionManagerClient) DeleteMovePrescription(ctx context.Context, in *DeleteMovePrescriptionRequest, opts ...grpc.CallOption) (*MovePrescription, error) {
	out := new(MovePrescription)
	err := c.cc.Invoke(ctx, "/pb.MovePrescriptionManager/DeleteMovePrescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movePrescriptionManagerClient) GetMovePrescriptions(ctx context.Context, in *GetMovePrescriptionsRequest, opts ...grpc.CallOption) (*GetMovePrescriptionsReply, error) {
	out := new(GetMovePrescriptionsReply)
	err := c.cc.Invoke(ctx, "/pb.MovePrescriptionManager/GetMovePrescriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovePrescriptionManagerServer is the server API for MovePrescriptionManager service.
// All implementations must embed UnimplementedMovePrescriptionManagerServer
// for forward compatibility
type MovePrescriptionManagerServer interface {
	CreateMovePrescription(context.Context, *CreateMovePrescriptionRequest) (*MovePrescription, error)
	GetMovePrescription(context.Context, *GetMovePrescriptionRequest) (*MovePrescription, error)
	UpdateMovePrescription(context.Context, *UpdateMovePrescriptionRequest) (*MovePrescription, error)
	DeleteMovePrescription(context.Context, *DeleteMovePrescriptionRequest) (*MovePrescription, error)
	GetMovePrescriptions(context.Context, *GetMovePrescriptionsRequest) (*GetMovePrescriptionsReply, error)
	mustEmbedUnimplementedMovePrescriptionManagerServer()
}

// UnimplementedMovePrescriptionManagerServer must be embedded to have forward compatible implementations.
type UnimplementedMovePrescriptionManagerServer struct {
}

func (UnimplementedMovePrescriptionManagerServer) CreateMovePrescription(context.Context, *CreateMovePrescriptionRequest) (*MovePrescription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMovePrescription not implemented")
}
func (UnimplementedMovePrescriptionManagerServer) GetMovePrescription(context.Context, *GetMovePrescriptionRequest) (*MovePrescription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovePrescription not implemented")
}
func (UnimplementedMovePrescriptionManagerServer) UpdateMovePrescription(context.Context, *UpdateMovePrescriptionRequest) (*MovePrescription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMovePrescription not implemented")
}
func (UnimplementedMovePrescriptionManagerServer) DeleteMovePrescription(context.Context, *DeleteMovePrescriptionRequest) (*MovePrescription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovePrescription not implemented")
}
func (UnimplementedMovePrescriptionManagerServer) GetMovePrescriptions(context.Context, *GetMovePrescriptionsRequest) (*GetMovePrescriptionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovePrescriptions not implemented")
}
func (UnimplementedMovePrescriptionManagerServer) mustEmbedUnimplementedMovePrescriptionManagerServer() {
}

// UnsafeMovePrescriptionManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovePrescriptionManagerServer will
// result in compilation errors.
type UnsafeMovePrescriptionManagerServer interface {
	mustEmbedUnimplementedMovePrescriptionManagerServer()
}

func RegisterMovePrescriptionManagerServer(s grpc.ServiceRegistrar, srv MovePrescriptionManagerServer) {
	s.RegisterService(&MovePrescriptionManager_ServiceDesc, srv)
}

func _MovePrescriptionManager_CreateMovePrescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMovePrescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovePrescriptionManagerServer).CreateMovePrescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MovePrescriptionManager/CreateMovePrescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovePrescriptionManagerServer).CreateMovePrescription(ctx, req.(*CreateMovePrescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovePrescriptionManager_GetMovePrescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovePrescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovePrescriptionManagerServer).GetMovePrescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MovePrescriptionManager/GetMovePrescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovePrescriptionManagerServer).GetMovePrescription(ctx, req.(*GetMovePrescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovePrescriptionManager_UpdateMovePrescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMovePrescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovePrescriptionManagerServer).UpdateMovePrescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MovePrescriptionManager/UpdateMovePrescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovePrescriptionManagerServer).UpdateMovePrescription(ctx, req.(*UpdateMovePrescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovePrescriptionManager_DeleteMovePrescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMovePrescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovePrescriptionManagerServer).DeleteMovePrescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MovePrescriptionManager/DeleteMovePrescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovePrescriptionManagerServer).DeleteMovePrescription(ctx, req.(*DeleteMovePrescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovePrescriptionManager_GetMovePrescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovePrescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovePrescriptionManagerServer).GetMovePrescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MovePrescriptionManager/GetMovePrescriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovePrescriptionManagerServer).GetMovePrescriptions(ctx, req.(*GetMovePrescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MovePrescriptionManager_ServiceDesc is the grpc.ServiceDesc for MovePrescriptionManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovePrescriptionManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MovePrescriptionManager",
	HandlerType: (*MovePrescriptionManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMovePrescription",
			Handler:    _MovePrescriptionManager_CreateMovePrescription_Handler,
		},
		{
			MethodName: "GetMovePrescription",
			Handler:    _MovePrescriptionManager_GetMovePrescription_Handler,
		},
		{
			MethodName: "UpdateMovePrescription",
			Handler:    _MovePrescriptionManager_UpdateMovePrescription_Handler,
		},
		{
			MethodName: "DeleteMovePrescription",
			Handler:    _MovePrescriptionManager_DeleteMovePrescription_Handler,
		},
		{
			MethodName: "GetMovePrescriptions",
			Handler:    _MovePrescriptionManager_GetMovePrescriptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "move_prescription.proto",
}
