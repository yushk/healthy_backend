// Code generated by go-swagger; DO NOT EDIT.

package monitor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	v1 "github.com/yushk/healthy_backend/apiserver/v1"
)

// DeleteMeasureResultHandlerFunc turns a function with the right signature into a delete measure result handler
type DeleteMeasureResultHandlerFunc func(DeleteMeasureResultParams, *v1.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteMeasureResultHandlerFunc) Handle(params DeleteMeasureResultParams, principal *v1.Principal) middleware.Responder {
	return fn(params, principal)
}

// DeleteMeasureResultHandler interface for that can handle valid delete measure result params
type DeleteMeasureResultHandler interface {
	Handle(DeleteMeasureResultParams, *v1.Principal) middleware.Responder
}

// NewDeleteMeasureResult creates a new http.Handler for the delete measure result operation
func NewDeleteMeasureResult(ctx *middleware.Context, handler DeleteMeasureResultHandler) *DeleteMeasureResult {
	return &DeleteMeasureResult{Context: ctx, Handler: handler}
}

/* DeleteMeasureResult swagger:route DELETE /v1/measureResult/{id} monitor deleteMeasureResult

删除测评数据结果分析信息

删除测评数据结果分析信息

*/
type DeleteMeasureResult struct {
	Context *middleware.Context
	Handler DeleteMeasureResultHandler
}

func (o *DeleteMeasureResult) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteMeasureResultParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *v1.Principal
	if uprinc != nil {
		principal = uprinc.(*v1.Principal) // this is really a v1.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
