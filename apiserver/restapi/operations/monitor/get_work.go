// Code generated by go-swagger; DO NOT EDIT.

package monitor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	v1 "github.com/yushk/healthy_backend/apiserver/v1"
)

// GetWorkHandlerFunc turns a function with the right signature into a get work handler
type GetWorkHandlerFunc func(GetWorkParams, *v1.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn GetWorkHandlerFunc) Handle(params GetWorkParams, principal *v1.Principal) middleware.Responder {
	return fn(params, principal)
}

// GetWorkHandler interface for that can handle valid get work params
type GetWorkHandler interface {
	Handle(GetWorkParams, *v1.Principal) middleware.Responder
}

// NewGetWork creates a new http.Handler for the get work operation
func NewGetWork(ctx *middleware.Context, handler GetWorkHandler) *GetWork {
	return &GetWork{Context: ctx, Handler: handler}
}

/* GetWork swagger:route GET /v1/work/{id} monitor getWork

获取作业信息

获取作业信息

*/
type GetWork struct {
	Context *middleware.Context
	Handler GetWorkHandler
}

func (o *GetWork) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetWorkParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *v1.Principal
	if uprinc != nil {
		principal = uprinc.(*v1.Principal) // this is really a v1.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
