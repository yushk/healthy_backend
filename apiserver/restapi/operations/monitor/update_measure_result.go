// Code generated by go-swagger; DO NOT EDIT.

package monitor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	v1 "gitee.com/healthy/backend/apiserver/v1"
	"github.com/go-openapi/runtime/middleware"
)

// UpdateMeasureResultHandlerFunc turns a function with the right signature into a update measure result handler
type UpdateMeasureResultHandlerFunc func(UpdateMeasureResultParams, *v1.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateMeasureResultHandlerFunc) Handle(params UpdateMeasureResultParams, principal *v1.Principal) middleware.Responder {
	return fn(params, principal)
}

// UpdateMeasureResultHandler interface for that can handle valid update measure result params
type UpdateMeasureResultHandler interface {
	Handle(UpdateMeasureResultParams, *v1.Principal) middleware.Responder
}

// NewUpdateMeasureResult creates a new http.Handler for the update measure result operation
func NewUpdateMeasureResult(ctx *middleware.Context, handler UpdateMeasureResultHandler) *UpdateMeasureResult {
	return &UpdateMeasureResult{Context: ctx, Handler: handler}
}

/* UpdateMeasureResult swagger:route PUT /v1/measureResult/{id} monitor updateMeasureResult

编辑测评数据结果分析信息

编辑测评数据结果分析信息

*/
type UpdateMeasureResult struct {
	Context *middleware.Context
	Handler UpdateMeasureResultHandler
}

func (o *UpdateMeasureResult) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateMeasureResultParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *v1.Principal
	if uprinc != nil {
		principal = uprinc.(*v1.Principal) // this is really a v1.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
