// Code generated by go-swagger; DO NOT EDIT.

package monitor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	v1 "gitee.com/healthy/backend/apiserver/v1"
	"github.com/go-openapi/runtime/middleware"
)

// CreateClassHandlerFunc turns a function with the right signature into a create class handler
type CreateClassHandlerFunc func(CreateClassParams, *v1.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateClassHandlerFunc) Handle(params CreateClassParams, principal *v1.Principal) middleware.Responder {
	return fn(params, principal)
}

// CreateClassHandler interface for that can handle valid create class params
type CreateClassHandler interface {
	Handle(CreateClassParams, *v1.Principal) middleware.Responder
}

// NewCreateClass creates a new http.Handler for the create class operation
func NewCreateClass(ctx *middleware.Context, handler CreateClassHandler) *CreateClass {
	return &CreateClass{Context: ctx, Handler: handler}
}

/* CreateClass swagger:route POST /v1/class monitor createClass

创建班级信息

创建班级信息

*/
type CreateClass struct {
	Context *middleware.Context
	Handler CreateClassHandler
}

func (o *CreateClass) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateClassParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *v1.Principal
	if uprinc != nil {
		principal = uprinc.(*v1.Principal) // this is really a v1.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
