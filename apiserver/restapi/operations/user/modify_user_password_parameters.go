// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ModifyUserPasswordMaxParseMemory sets the maximum size in bytes for
// the multipart form parser for this operation.
//
// The default value is 32 MB.
// The multipart parser stores up to this + 10MB.
var ModifyUserPasswordMaxParseMemory int64 = 32 << 20

// NewModifyUserPasswordParams creates a new ModifyUserPasswordParams object
//
// There are no default values defined in the spec.
func NewModifyUserPasswordParams() ModifyUserPasswordParams {

	return ModifyUserPasswordParams{}
}

// ModifyUserPasswordParams contains all the bound params for the modify user password operation
// typically these are obtained from a http.Request
//
// swagger:parameters ModifyUserPassword
type ModifyUserPasswordParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*新密码
	  Required: true
	  In: formData
	*/
	NewPassword string
	/*原始密码
	  Required: true
	  In: formData
	*/
	OldPassword string
	/*用户名
	  In: query
	*/
	Username *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewModifyUserPasswordParams() beforehand.
func (o *ModifyUserPasswordParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if err := r.ParseMultipartForm(ModifyUserPasswordMaxParseMemory); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	fdNewPassword, fdhkNewPassword, _ := fds.GetOK("new_password")
	if err := o.bindNewPassword(fdNewPassword, fdhkNewPassword, route.Formats); err != nil {
		res = append(res, err)
	}

	fdOldPassword, fdhkOldPassword, _ := fds.GetOK("old_password")
	if err := o.bindOldPassword(fdOldPassword, fdhkOldPassword, route.Formats); err != nil {
		res = append(res, err)
	}

	qUsername, qhkUsername, _ := qs.GetOK("username")
	if err := o.bindUsername(qUsername, qhkUsername, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindNewPassword binds and validates parameter NewPassword from formData.
func (o *ModifyUserPasswordParams) bindNewPassword(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("new_password", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("new_password", "formData", raw); err != nil {
		return err
	}
	o.NewPassword = raw

	return nil
}

// bindOldPassword binds and validates parameter OldPassword from formData.
func (o *ModifyUserPasswordParams) bindOldPassword(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("old_password", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("old_password", "formData", raw); err != nil {
		return err
	}
	o.OldPassword = raw

	return nil
}

// bindUsername binds and validates parameter Username from query.
func (o *ModifyUserPasswordParams) bindUsername(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Username = &raw

	return nil
}
