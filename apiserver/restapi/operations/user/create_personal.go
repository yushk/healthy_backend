// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	v1 "gitee.com/healthy/backend/apiserver/v1"
)

// CreatePersonalHandlerFunc turns a function with the right signature into a create personal handler
type CreatePersonalHandlerFunc func(CreatePersonalParams, *v1.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn CreatePersonalHandlerFunc) Handle(params CreatePersonalParams, principal *v1.Principal) middleware.Responder {
	return fn(params, principal)
}

// CreatePersonalHandler interface for that can handle valid create personal params
type CreatePersonalHandler interface {
	Handle(CreatePersonalParams, *v1.Principal) middleware.Responder
}

// NewCreatePersonal creates a new http.Handler for the create personal operation
func NewCreatePersonal(ctx *middleware.Context, handler CreatePersonalHandler) *CreatePersonal {
	return &CreatePersonal{Context: ctx, Handler: handler}
}

/* CreatePersonal swagger:route POST /v1/personal user createPersonal

创建个人基础信息

创建个人基础信息

*/
type CreatePersonal struct {
	Context *middleware.Context
	Handler CreatePersonalHandler
}

func (o *CreatePersonal) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreatePersonalParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *v1.Principal
	if uprinc != nil {
		principal = uprinc.(*v1.Principal) // this is really a v1.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
