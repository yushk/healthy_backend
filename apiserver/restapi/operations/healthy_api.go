// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/yushk/healthy_backend/apiserver/restapi/operations/monitor"
	"github.com/yushk/healthy_backend/apiserver/restapi/operations/oauth"
	"github.com/yushk/healthy_backend/apiserver/restapi/operations/user"
	v1 "github.com/yushk/healthy_backend/apiserver/v1"
)

// NewHealthyAPI creates a new Healthy instance
func NewHealthyAPI(spec *loads.Document) *HealthyAPI {
	return &HealthyAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer:    runtime.JSONConsumer(),
		UrlformConsumer: runtime.DiscardConsumer,

		JSONProducer: runtime.JSONProducer(),

		MonitorCreateCaseDataHandler: monitor.CreateCaseDataHandlerFunc(func(params monitor.CreateCaseDataParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.CreateCaseData has not yet been implemented")
		}),
		MonitorCreateClassHandler: monitor.CreateClassHandlerFunc(func(params monitor.CreateClassParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.CreateClass has not yet been implemented")
		}),
		MonitorCreateMeasureDetailHandler: monitor.CreateMeasureDetailHandlerFunc(func(params monitor.CreateMeasureDetailParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.CreateMeasureDetail has not yet been implemented")
		}),
		MonitorCreateMeasureResultHandler: monitor.CreateMeasureResultHandlerFunc(func(params monitor.CreateMeasureResultParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.CreateMeasureResult has not yet been implemented")
		}),
		MonitorCreateMoveDataHandler: monitor.CreateMoveDataHandlerFunc(func(params monitor.CreateMoveDataParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.CreateMoveData has not yet been implemented")
		}),
		MonitorCreateMovePrescriptionHandler: monitor.CreateMovePrescriptionHandlerFunc(func(params monitor.CreateMovePrescriptionParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.CreateMovePrescription has not yet been implemented")
		}),
		UserCreatePersonalHandler: user.CreatePersonalHandlerFunc(func(params user.CreatePersonalParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.CreatePersonal has not yet been implemented")
		}),
		UserCreateUserHandler: user.CreateUserHandlerFunc(func(params user.CreateUserParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.CreateUser has not yet been implemented")
		}),
		MonitorCreateWorkHandler: monitor.CreateWorkHandlerFunc(func(params monitor.CreateWorkParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.CreateWork has not yet been implemented")
		}),
		MonitorCreateWorkSubmitHandler: monitor.CreateWorkSubmitHandlerFunc(func(params monitor.CreateWorkSubmitParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.CreateWorkSubmit has not yet been implemented")
		}),
		MonitorDeleteCaseDataHandler: monitor.DeleteCaseDataHandlerFunc(func(params monitor.DeleteCaseDataParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.DeleteCaseData has not yet been implemented")
		}),
		MonitorDeleteClassHandler: monitor.DeleteClassHandlerFunc(func(params monitor.DeleteClassParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.DeleteClass has not yet been implemented")
		}),
		MonitorDeleteMeasureDetailHandler: monitor.DeleteMeasureDetailHandlerFunc(func(params monitor.DeleteMeasureDetailParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.DeleteMeasureDetail has not yet been implemented")
		}),
		MonitorDeleteMeasureResultHandler: monitor.DeleteMeasureResultHandlerFunc(func(params monitor.DeleteMeasureResultParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.DeleteMeasureResult has not yet been implemented")
		}),
		MonitorDeleteMoveDataHandler: monitor.DeleteMoveDataHandlerFunc(func(params monitor.DeleteMoveDataParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.DeleteMoveData has not yet been implemented")
		}),
		MonitorDeleteMovePrescriptionHandler: monitor.DeleteMovePrescriptionHandlerFunc(func(params monitor.DeleteMovePrescriptionParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.DeleteMovePrescription has not yet been implemented")
		}),
		UserDeletePersonalHandler: user.DeletePersonalHandlerFunc(func(params user.DeletePersonalParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.DeletePersonal has not yet been implemented")
		}),
		UserDeleteUserHandler: user.DeleteUserHandlerFunc(func(params user.DeleteUserParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.DeleteUser has not yet been implemented")
		}),
		MonitorDeleteWorkHandler: monitor.DeleteWorkHandlerFunc(func(params monitor.DeleteWorkParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.DeleteWork has not yet been implemented")
		}),
		MonitorDeleteWorkSubmitHandler: monitor.DeleteWorkSubmitHandlerFunc(func(params monitor.DeleteWorkSubmitParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.DeleteWorkSubmit has not yet been implemented")
		}),
		MonitorGetCaseDataHandler: monitor.GetCaseDataHandlerFunc(func(params monitor.GetCaseDataParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.GetCaseData has not yet been implemented")
		}),
		MonitorGetCaseDatasHandler: monitor.GetCaseDatasHandlerFunc(func(params monitor.GetCaseDatasParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.GetCaseDatas has not yet been implemented")
		}),
		MonitorGetClassHandler: monitor.GetClassHandlerFunc(func(params monitor.GetClassParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.GetClass has not yet been implemented")
		}),
		MonitorGetClassesHandler: monitor.GetClassesHandlerFunc(func(params monitor.GetClassesParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.GetClasses has not yet been implemented")
		}),
		MonitorGetMeasureDetailHandler: monitor.GetMeasureDetailHandlerFunc(func(params monitor.GetMeasureDetailParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.GetMeasureDetail has not yet been implemented")
		}),
		MonitorGetMeasureDetailsHandler: monitor.GetMeasureDetailsHandlerFunc(func(params monitor.GetMeasureDetailsParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.GetMeasureDetails has not yet been implemented")
		}),
		MonitorGetMeasureResultHandler: monitor.GetMeasureResultHandlerFunc(func(params monitor.GetMeasureResultParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.GetMeasureResult has not yet been implemented")
		}),
		MonitorGetMeasureResultsHandler: monitor.GetMeasureResultsHandlerFunc(func(params monitor.GetMeasureResultsParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.GetMeasureResults has not yet been implemented")
		}),
		MonitorGetMoveDataHandler: monitor.GetMoveDataHandlerFunc(func(params monitor.GetMoveDataParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.GetMoveData has not yet been implemented")
		}),
		MonitorGetMoveDatasHandler: monitor.GetMoveDatasHandlerFunc(func(params monitor.GetMoveDatasParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.GetMoveDatas has not yet been implemented")
		}),
		MonitorGetMovePrescriptionHandler: monitor.GetMovePrescriptionHandlerFunc(func(params monitor.GetMovePrescriptionParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.GetMovePrescription has not yet been implemented")
		}),
		MonitorGetMovePrescriptionsHandler: monitor.GetMovePrescriptionsHandlerFunc(func(params monitor.GetMovePrescriptionsParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.GetMovePrescriptions has not yet been implemented")
		}),
		UserGetPersonalHandler: user.GetPersonalHandlerFunc(func(params user.GetPersonalParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.GetPersonal has not yet been implemented")
		}),
		UserGetPersonalsHandler: user.GetPersonalsHandlerFunc(func(params user.GetPersonalsParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.GetPersonals has not yet been implemented")
		}),
		UserGetUserHandler: user.GetUserHandlerFunc(func(params user.GetUserParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.GetUser has not yet been implemented")
		}),
		UserGetUserInfoHandler: user.GetUserInfoHandlerFunc(func(params user.GetUserInfoParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.GetUserInfo has not yet been implemented")
		}),
		UserGetUsersHandler: user.GetUsersHandlerFunc(func(params user.GetUsersParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.GetUsers has not yet been implemented")
		}),
		MonitorGetWorkHandler: monitor.GetWorkHandlerFunc(func(params monitor.GetWorkParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.GetWork has not yet been implemented")
		}),
		MonitorGetWorkSubmitHandler: monitor.GetWorkSubmitHandlerFunc(func(params monitor.GetWorkSubmitParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.GetWorkSubmit has not yet been implemented")
		}),
		MonitorGetWorkSubmitsHandler: monitor.GetWorkSubmitsHandlerFunc(func(params monitor.GetWorkSubmitsParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.GetWorkSubmits has not yet been implemented")
		}),
		MonitorGetWorksHandler: monitor.GetWorksHandlerFunc(func(params monitor.GetWorksParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.GetWorks has not yet been implemented")
		}),
		UserLoginHandler: user.LoginHandlerFunc(func(params user.LoginParams) middleware.Responder {
			return middleware.NotImplemented("operation user.Login has not yet been implemented")
		}),
		UserLogoutHandler: user.LogoutHandlerFunc(func(params user.LogoutParams) middleware.Responder {
			return middleware.NotImplemented("operation user.Logout has not yet been implemented")
		}),
		UserModifyUserPasswordHandler: user.ModifyUserPasswordHandlerFunc(func(params user.ModifyUserPasswordParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.ModifyUserPassword has not yet been implemented")
		}),
		OauthTokenHandler: oauth.TokenHandlerFunc(func(params oauth.TokenParams) middleware.Responder {
			return middleware.NotImplemented("operation oauth.Token has not yet been implemented")
		}),
		MonitorUpdateCaseDataHandler: monitor.UpdateCaseDataHandlerFunc(func(params monitor.UpdateCaseDataParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.UpdateCaseData has not yet been implemented")
		}),
		MonitorUpdateClassHandler: monitor.UpdateClassHandlerFunc(func(params monitor.UpdateClassParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.UpdateClass has not yet been implemented")
		}),
		MonitorUpdateMeasureDetailHandler: monitor.UpdateMeasureDetailHandlerFunc(func(params monitor.UpdateMeasureDetailParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.UpdateMeasureDetail has not yet been implemented")
		}),
		MonitorUpdateMeasureResultHandler: monitor.UpdateMeasureResultHandlerFunc(func(params monitor.UpdateMeasureResultParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.UpdateMeasureResult has not yet been implemented")
		}),
		MonitorUpdateMoveDataHandler: monitor.UpdateMoveDataHandlerFunc(func(params monitor.UpdateMoveDataParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.UpdateMoveData has not yet been implemented")
		}),
		MonitorUpdateMovePrescriptionHandler: monitor.UpdateMovePrescriptionHandlerFunc(func(params monitor.UpdateMovePrescriptionParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.UpdateMovePrescription has not yet been implemented")
		}),
		UserUpdatePersonalHandler: user.UpdatePersonalHandlerFunc(func(params user.UpdatePersonalParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.UpdatePersonal has not yet been implemented")
		}),
		UserUpdateUserHandler: user.UpdateUserHandlerFunc(func(params user.UpdateUserParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.UpdateUser has not yet been implemented")
		}),
		MonitorUpdateWorkHandler: monitor.UpdateWorkHandlerFunc(func(params monitor.UpdateWorkParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.UpdateWork has not yet been implemented")
		}),
		MonitorUpdateWorkSubmitHandler: monitor.UpdateWorkSubmitHandlerFunc(func(params monitor.UpdateWorkSubmitParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation monitor.UpdateWorkSubmit has not yet been implemented")
		}),

		OAuth2Auth: func(token string, scopes []string) (*v1.Principal, error) {
			return nil, errors.NotImplemented("oauth2 bearer auth (OAuth2) has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*HealthyAPI 体制检测系统API */
type HealthyAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer
	// UrlformConsumer registers a consumer for the following mime types:
	//   - application/x-www-form-urlencoded
	UrlformConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// OAuth2Auth registers a function that takes an access token and a collection of required scopes and returns a principal
	// it performs authentication based on an oauth2 bearer token provided in the request
	OAuth2Auth func(string, []string) (*v1.Principal, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// MonitorCreateCaseDataHandler sets the operation handler for the create case data operation
	MonitorCreateCaseDataHandler monitor.CreateCaseDataHandler
	// MonitorCreateClassHandler sets the operation handler for the create class operation
	MonitorCreateClassHandler monitor.CreateClassHandler
	// MonitorCreateMeasureDetailHandler sets the operation handler for the create measure detail operation
	MonitorCreateMeasureDetailHandler monitor.CreateMeasureDetailHandler
	// MonitorCreateMeasureResultHandler sets the operation handler for the create measure result operation
	MonitorCreateMeasureResultHandler monitor.CreateMeasureResultHandler
	// MonitorCreateMoveDataHandler sets the operation handler for the create move data operation
	MonitorCreateMoveDataHandler monitor.CreateMoveDataHandler
	// MonitorCreateMovePrescriptionHandler sets the operation handler for the create move prescription operation
	MonitorCreateMovePrescriptionHandler monitor.CreateMovePrescriptionHandler
	// UserCreatePersonalHandler sets the operation handler for the create personal operation
	UserCreatePersonalHandler user.CreatePersonalHandler
	// UserCreateUserHandler sets the operation handler for the create user operation
	UserCreateUserHandler user.CreateUserHandler
	// MonitorCreateWorkHandler sets the operation handler for the create work operation
	MonitorCreateWorkHandler monitor.CreateWorkHandler
	// MonitorCreateWorkSubmitHandler sets the operation handler for the create work submit operation
	MonitorCreateWorkSubmitHandler monitor.CreateWorkSubmitHandler
	// MonitorDeleteCaseDataHandler sets the operation handler for the delete case data operation
	MonitorDeleteCaseDataHandler monitor.DeleteCaseDataHandler
	// MonitorDeleteClassHandler sets the operation handler for the delete class operation
	MonitorDeleteClassHandler monitor.DeleteClassHandler
	// MonitorDeleteMeasureDetailHandler sets the operation handler for the delete measure detail operation
	MonitorDeleteMeasureDetailHandler monitor.DeleteMeasureDetailHandler
	// MonitorDeleteMeasureResultHandler sets the operation handler for the delete measure result operation
	MonitorDeleteMeasureResultHandler monitor.DeleteMeasureResultHandler
	// MonitorDeleteMoveDataHandler sets the operation handler for the delete move data operation
	MonitorDeleteMoveDataHandler monitor.DeleteMoveDataHandler
	// MonitorDeleteMovePrescriptionHandler sets the operation handler for the delete move prescription operation
	MonitorDeleteMovePrescriptionHandler monitor.DeleteMovePrescriptionHandler
	// UserDeletePersonalHandler sets the operation handler for the delete personal operation
	UserDeletePersonalHandler user.DeletePersonalHandler
	// UserDeleteUserHandler sets the operation handler for the delete user operation
	UserDeleteUserHandler user.DeleteUserHandler
	// MonitorDeleteWorkHandler sets the operation handler for the delete work operation
	MonitorDeleteWorkHandler monitor.DeleteWorkHandler
	// MonitorDeleteWorkSubmitHandler sets the operation handler for the delete work submit operation
	MonitorDeleteWorkSubmitHandler monitor.DeleteWorkSubmitHandler
	// MonitorGetCaseDataHandler sets the operation handler for the get case data operation
	MonitorGetCaseDataHandler monitor.GetCaseDataHandler
	// MonitorGetCaseDatasHandler sets the operation handler for the get case datas operation
	MonitorGetCaseDatasHandler monitor.GetCaseDatasHandler
	// MonitorGetClassHandler sets the operation handler for the get class operation
	MonitorGetClassHandler monitor.GetClassHandler
	// MonitorGetClassesHandler sets the operation handler for the get classes operation
	MonitorGetClassesHandler monitor.GetClassesHandler
	// MonitorGetMeasureDetailHandler sets the operation handler for the get measure detail operation
	MonitorGetMeasureDetailHandler monitor.GetMeasureDetailHandler
	// MonitorGetMeasureDetailsHandler sets the operation handler for the get measure details operation
	MonitorGetMeasureDetailsHandler monitor.GetMeasureDetailsHandler
	// MonitorGetMeasureResultHandler sets the operation handler for the get measure result operation
	MonitorGetMeasureResultHandler monitor.GetMeasureResultHandler
	// MonitorGetMeasureResultsHandler sets the operation handler for the get measure results operation
	MonitorGetMeasureResultsHandler monitor.GetMeasureResultsHandler
	// MonitorGetMoveDataHandler sets the operation handler for the get move data operation
	MonitorGetMoveDataHandler monitor.GetMoveDataHandler
	// MonitorGetMoveDatasHandler sets the operation handler for the get move datas operation
	MonitorGetMoveDatasHandler monitor.GetMoveDatasHandler
	// MonitorGetMovePrescriptionHandler sets the operation handler for the get move prescription operation
	MonitorGetMovePrescriptionHandler monitor.GetMovePrescriptionHandler
	// MonitorGetMovePrescriptionsHandler sets the operation handler for the get move prescriptions operation
	MonitorGetMovePrescriptionsHandler monitor.GetMovePrescriptionsHandler
	// UserGetPersonalHandler sets the operation handler for the get personal operation
	UserGetPersonalHandler user.GetPersonalHandler
	// UserGetPersonalsHandler sets the operation handler for the get personals operation
	UserGetPersonalsHandler user.GetPersonalsHandler
	// UserGetUserHandler sets the operation handler for the get user operation
	UserGetUserHandler user.GetUserHandler
	// UserGetUserInfoHandler sets the operation handler for the get user info operation
	UserGetUserInfoHandler user.GetUserInfoHandler
	// UserGetUsersHandler sets the operation handler for the get users operation
	UserGetUsersHandler user.GetUsersHandler
	// MonitorGetWorkHandler sets the operation handler for the get work operation
	MonitorGetWorkHandler monitor.GetWorkHandler
	// MonitorGetWorkSubmitHandler sets the operation handler for the get work submit operation
	MonitorGetWorkSubmitHandler monitor.GetWorkSubmitHandler
	// MonitorGetWorkSubmitsHandler sets the operation handler for the get work submits operation
	MonitorGetWorkSubmitsHandler monitor.GetWorkSubmitsHandler
	// MonitorGetWorksHandler sets the operation handler for the get works operation
	MonitorGetWorksHandler monitor.GetWorksHandler
	// UserLoginHandler sets the operation handler for the login operation
	UserLoginHandler user.LoginHandler
	// UserLogoutHandler sets the operation handler for the logout operation
	UserLogoutHandler user.LogoutHandler
	// UserModifyUserPasswordHandler sets the operation handler for the modify user password operation
	UserModifyUserPasswordHandler user.ModifyUserPasswordHandler
	// OauthTokenHandler sets the operation handler for the token operation
	OauthTokenHandler oauth.TokenHandler
	// MonitorUpdateCaseDataHandler sets the operation handler for the update case data operation
	MonitorUpdateCaseDataHandler monitor.UpdateCaseDataHandler
	// MonitorUpdateClassHandler sets the operation handler for the update class operation
	MonitorUpdateClassHandler monitor.UpdateClassHandler
	// MonitorUpdateMeasureDetailHandler sets the operation handler for the update measure detail operation
	MonitorUpdateMeasureDetailHandler monitor.UpdateMeasureDetailHandler
	// MonitorUpdateMeasureResultHandler sets the operation handler for the update measure result operation
	MonitorUpdateMeasureResultHandler monitor.UpdateMeasureResultHandler
	// MonitorUpdateMoveDataHandler sets the operation handler for the update move data operation
	MonitorUpdateMoveDataHandler monitor.UpdateMoveDataHandler
	// MonitorUpdateMovePrescriptionHandler sets the operation handler for the update move prescription operation
	MonitorUpdateMovePrescriptionHandler monitor.UpdateMovePrescriptionHandler
	// UserUpdatePersonalHandler sets the operation handler for the update personal operation
	UserUpdatePersonalHandler user.UpdatePersonalHandler
	// UserUpdateUserHandler sets the operation handler for the update user operation
	UserUpdateUserHandler user.UpdateUserHandler
	// MonitorUpdateWorkHandler sets the operation handler for the update work operation
	MonitorUpdateWorkHandler monitor.UpdateWorkHandler
	// MonitorUpdateWorkSubmitHandler sets the operation handler for the update work submit operation
	MonitorUpdateWorkSubmitHandler monitor.UpdateWorkSubmitHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *HealthyAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *HealthyAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *HealthyAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *HealthyAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *HealthyAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *HealthyAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *HealthyAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *HealthyAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *HealthyAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the HealthyAPI
func (o *HealthyAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}
	if o.UrlformConsumer == nil {
		unregistered = append(unregistered, "UrlformConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.OAuth2Auth == nil {
		unregistered = append(unregistered, "OAuth2Auth")
	}

	if o.MonitorCreateCaseDataHandler == nil {
		unregistered = append(unregistered, "monitor.CreateCaseDataHandler")
	}
	if o.MonitorCreateClassHandler == nil {
		unregistered = append(unregistered, "monitor.CreateClassHandler")
	}
	if o.MonitorCreateMeasureDetailHandler == nil {
		unregistered = append(unregistered, "monitor.CreateMeasureDetailHandler")
	}
	if o.MonitorCreateMeasureResultHandler == nil {
		unregistered = append(unregistered, "monitor.CreateMeasureResultHandler")
	}
	if o.MonitorCreateMoveDataHandler == nil {
		unregistered = append(unregistered, "monitor.CreateMoveDataHandler")
	}
	if o.MonitorCreateMovePrescriptionHandler == nil {
		unregistered = append(unregistered, "monitor.CreateMovePrescriptionHandler")
	}
	if o.UserCreatePersonalHandler == nil {
		unregistered = append(unregistered, "user.CreatePersonalHandler")
	}
	if o.UserCreateUserHandler == nil {
		unregistered = append(unregistered, "user.CreateUserHandler")
	}
	if o.MonitorCreateWorkHandler == nil {
		unregistered = append(unregistered, "monitor.CreateWorkHandler")
	}
	if o.MonitorCreateWorkSubmitHandler == nil {
		unregistered = append(unregistered, "monitor.CreateWorkSubmitHandler")
	}
	if o.MonitorDeleteCaseDataHandler == nil {
		unregistered = append(unregistered, "monitor.DeleteCaseDataHandler")
	}
	if o.MonitorDeleteClassHandler == nil {
		unregistered = append(unregistered, "monitor.DeleteClassHandler")
	}
	if o.MonitorDeleteMeasureDetailHandler == nil {
		unregistered = append(unregistered, "monitor.DeleteMeasureDetailHandler")
	}
	if o.MonitorDeleteMeasureResultHandler == nil {
		unregistered = append(unregistered, "monitor.DeleteMeasureResultHandler")
	}
	if o.MonitorDeleteMoveDataHandler == nil {
		unregistered = append(unregistered, "monitor.DeleteMoveDataHandler")
	}
	if o.MonitorDeleteMovePrescriptionHandler == nil {
		unregistered = append(unregistered, "monitor.DeleteMovePrescriptionHandler")
	}
	if o.UserDeletePersonalHandler == nil {
		unregistered = append(unregistered, "user.DeletePersonalHandler")
	}
	if o.UserDeleteUserHandler == nil {
		unregistered = append(unregistered, "user.DeleteUserHandler")
	}
	if o.MonitorDeleteWorkHandler == nil {
		unregistered = append(unregistered, "monitor.DeleteWorkHandler")
	}
	if o.MonitorDeleteWorkSubmitHandler == nil {
		unregistered = append(unregistered, "monitor.DeleteWorkSubmitHandler")
	}
	if o.MonitorGetCaseDataHandler == nil {
		unregistered = append(unregistered, "monitor.GetCaseDataHandler")
	}
	if o.MonitorGetCaseDatasHandler == nil {
		unregistered = append(unregistered, "monitor.GetCaseDatasHandler")
	}
	if o.MonitorGetClassHandler == nil {
		unregistered = append(unregistered, "monitor.GetClassHandler")
	}
	if o.MonitorGetClassesHandler == nil {
		unregistered = append(unregistered, "monitor.GetClassesHandler")
	}
	if o.MonitorGetMeasureDetailHandler == nil {
		unregistered = append(unregistered, "monitor.GetMeasureDetailHandler")
	}
	if o.MonitorGetMeasureDetailsHandler == nil {
		unregistered = append(unregistered, "monitor.GetMeasureDetailsHandler")
	}
	if o.MonitorGetMeasureResultHandler == nil {
		unregistered = append(unregistered, "monitor.GetMeasureResultHandler")
	}
	if o.MonitorGetMeasureResultsHandler == nil {
		unregistered = append(unregistered, "monitor.GetMeasureResultsHandler")
	}
	if o.MonitorGetMoveDataHandler == nil {
		unregistered = append(unregistered, "monitor.GetMoveDataHandler")
	}
	if o.MonitorGetMoveDatasHandler == nil {
		unregistered = append(unregistered, "monitor.GetMoveDatasHandler")
	}
	if o.MonitorGetMovePrescriptionHandler == nil {
		unregistered = append(unregistered, "monitor.GetMovePrescriptionHandler")
	}
	if o.MonitorGetMovePrescriptionsHandler == nil {
		unregistered = append(unregistered, "monitor.GetMovePrescriptionsHandler")
	}
	if o.UserGetPersonalHandler == nil {
		unregistered = append(unregistered, "user.GetPersonalHandler")
	}
	if o.UserGetPersonalsHandler == nil {
		unregistered = append(unregistered, "user.GetPersonalsHandler")
	}
	if o.UserGetUserHandler == nil {
		unregistered = append(unregistered, "user.GetUserHandler")
	}
	if o.UserGetUserInfoHandler == nil {
		unregistered = append(unregistered, "user.GetUserInfoHandler")
	}
	if o.UserGetUsersHandler == nil {
		unregistered = append(unregistered, "user.GetUsersHandler")
	}
	if o.MonitorGetWorkHandler == nil {
		unregistered = append(unregistered, "monitor.GetWorkHandler")
	}
	if o.MonitorGetWorkSubmitHandler == nil {
		unregistered = append(unregistered, "monitor.GetWorkSubmitHandler")
	}
	if o.MonitorGetWorkSubmitsHandler == nil {
		unregistered = append(unregistered, "monitor.GetWorkSubmitsHandler")
	}
	if o.MonitorGetWorksHandler == nil {
		unregistered = append(unregistered, "monitor.GetWorksHandler")
	}
	if o.UserLoginHandler == nil {
		unregistered = append(unregistered, "user.LoginHandler")
	}
	if o.UserLogoutHandler == nil {
		unregistered = append(unregistered, "user.LogoutHandler")
	}
	if o.UserModifyUserPasswordHandler == nil {
		unregistered = append(unregistered, "user.ModifyUserPasswordHandler")
	}
	if o.OauthTokenHandler == nil {
		unregistered = append(unregistered, "oauth.TokenHandler")
	}
	if o.MonitorUpdateCaseDataHandler == nil {
		unregistered = append(unregistered, "monitor.UpdateCaseDataHandler")
	}
	if o.MonitorUpdateClassHandler == nil {
		unregistered = append(unregistered, "monitor.UpdateClassHandler")
	}
	if o.MonitorUpdateMeasureDetailHandler == nil {
		unregistered = append(unregistered, "monitor.UpdateMeasureDetailHandler")
	}
	if o.MonitorUpdateMeasureResultHandler == nil {
		unregistered = append(unregistered, "monitor.UpdateMeasureResultHandler")
	}
	if o.MonitorUpdateMoveDataHandler == nil {
		unregistered = append(unregistered, "monitor.UpdateMoveDataHandler")
	}
	if o.MonitorUpdateMovePrescriptionHandler == nil {
		unregistered = append(unregistered, "monitor.UpdateMovePrescriptionHandler")
	}
	if o.UserUpdatePersonalHandler == nil {
		unregistered = append(unregistered, "user.UpdatePersonalHandler")
	}
	if o.UserUpdateUserHandler == nil {
		unregistered = append(unregistered, "user.UpdateUserHandler")
	}
	if o.MonitorUpdateWorkHandler == nil {
		unregistered = append(unregistered, "monitor.UpdateWorkHandler")
	}
	if o.MonitorUpdateWorkSubmitHandler == nil {
		unregistered = append(unregistered, "monitor.UpdateWorkSubmitHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *HealthyAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *HealthyAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "OAuth2":
			result[name] = o.BearerAuthenticator(name, func(token string, scopes []string) (interface{}, error) {
				return o.OAuth2Auth(token, scopes)
			})

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *HealthyAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *HealthyAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		case "application/x-www-form-urlencoded":
			result["application/x-www-form-urlencoded"] = o.UrlformConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *HealthyAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *HealthyAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the healthy API
func (o *HealthyAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *HealthyAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/caseData"] = monitor.NewCreateCaseData(o.context, o.MonitorCreateCaseDataHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/class"] = monitor.NewCreateClass(o.context, o.MonitorCreateClassHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/measureDetail"] = monitor.NewCreateMeasureDetail(o.context, o.MonitorCreateMeasureDetailHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/measureResult"] = monitor.NewCreateMeasureResult(o.context, o.MonitorCreateMeasureResultHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/moveData"] = monitor.NewCreateMoveData(o.context, o.MonitorCreateMoveDataHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/movePrescription"] = monitor.NewCreateMovePrescription(o.context, o.MonitorCreateMovePrescriptionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/personal"] = user.NewCreatePersonal(o.context, o.UserCreatePersonalHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/user"] = user.NewCreateUser(o.context, o.UserCreateUserHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/work"] = monitor.NewCreateWork(o.context, o.MonitorCreateWorkHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/workSubmit"] = monitor.NewCreateWorkSubmit(o.context, o.MonitorCreateWorkSubmitHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/caseData/{id}"] = monitor.NewDeleteCaseData(o.context, o.MonitorDeleteCaseDataHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/class/{id}"] = monitor.NewDeleteClass(o.context, o.MonitorDeleteClassHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/measureDetail/{id}"] = monitor.NewDeleteMeasureDetail(o.context, o.MonitorDeleteMeasureDetailHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/measureResult/{id}"] = monitor.NewDeleteMeasureResult(o.context, o.MonitorDeleteMeasureResultHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/moveData/{id}"] = monitor.NewDeleteMoveData(o.context, o.MonitorDeleteMoveDataHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/movePrescription/{id}"] = monitor.NewDeleteMovePrescription(o.context, o.MonitorDeleteMovePrescriptionHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/personal/{id}"] = user.NewDeletePersonal(o.context, o.UserDeletePersonalHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/user/{id}"] = user.NewDeleteUser(o.context, o.UserDeleteUserHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/work/{id}"] = monitor.NewDeleteWork(o.context, o.MonitorDeleteWorkHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/workSubmit/{id}"] = monitor.NewDeleteWorkSubmit(o.context, o.MonitorDeleteWorkSubmitHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/caseData/{id}"] = monitor.NewGetCaseData(o.context, o.MonitorGetCaseDataHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/caseDatas"] = monitor.NewGetCaseDatas(o.context, o.MonitorGetCaseDatasHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/class/{id}"] = monitor.NewGetClass(o.context, o.MonitorGetClassHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/classes"] = monitor.NewGetClasses(o.context, o.MonitorGetClassesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/measureDetail/{id}"] = monitor.NewGetMeasureDetail(o.context, o.MonitorGetMeasureDetailHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/measureDetails"] = monitor.NewGetMeasureDetails(o.context, o.MonitorGetMeasureDetailsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/measureResult/{id}"] = monitor.NewGetMeasureResult(o.context, o.MonitorGetMeasureResultHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/measureResults"] = monitor.NewGetMeasureResults(o.context, o.MonitorGetMeasureResultsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/moveData/{id}"] = monitor.NewGetMoveData(o.context, o.MonitorGetMoveDataHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/moveDatas"] = monitor.NewGetMoveDatas(o.context, o.MonitorGetMoveDatasHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/movePrescription/{id}"] = monitor.NewGetMovePrescription(o.context, o.MonitorGetMovePrescriptionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/movePrescriptions"] = monitor.NewGetMovePrescriptions(o.context, o.MonitorGetMovePrescriptionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/personal/{id}"] = user.NewGetPersonal(o.context, o.UserGetPersonalHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/personals"] = user.NewGetPersonals(o.context, o.UserGetPersonalsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/user/{id}"] = user.NewGetUser(o.context, o.UserGetUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/user"] = user.NewGetUserInfo(o.context, o.UserGetUserInfoHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/users"] = user.NewGetUsers(o.context, o.UserGetUsersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/work/{id}"] = monitor.NewGetWork(o.context, o.MonitorGetWorkHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/workSubmit/{id}"] = monitor.NewGetWorkSubmit(o.context, o.MonitorGetWorkSubmitHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/workSubmits"] = monitor.NewGetWorkSubmits(o.context, o.MonitorGetWorkSubmitsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/works"] = monitor.NewGetWorks(o.context, o.MonitorGetWorksHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/login"] = user.NewLogin(o.context, o.UserLoginHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/logout"] = user.NewLogout(o.context, o.UserLogoutHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/v1/user"] = user.NewModifyUserPassword(o.context, o.UserModifyUserPasswordHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/oauth/token"] = oauth.NewToken(o.context, o.OauthTokenHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/caseData/{id}"] = monitor.NewUpdateCaseData(o.context, o.MonitorUpdateCaseDataHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/class/{id}"] = monitor.NewUpdateClass(o.context, o.MonitorUpdateClassHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/measureDetail/{id}"] = monitor.NewUpdateMeasureDetail(o.context, o.MonitorUpdateMeasureDetailHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/measureResult/{id}"] = monitor.NewUpdateMeasureResult(o.context, o.MonitorUpdateMeasureResultHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/moveData/{id}"] = monitor.NewUpdateMoveData(o.context, o.MonitorUpdateMoveDataHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/movePrescription/{id}"] = monitor.NewUpdateMovePrescription(o.context, o.MonitorUpdateMovePrescriptionHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/personal/{id}"] = user.NewUpdatePersonal(o.context, o.UserUpdatePersonalHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/user/{id}"] = user.NewUpdateUser(o.context, o.UserUpdateUserHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/work/{id}"] = monitor.NewUpdateWork(o.context, o.MonitorUpdateWorkHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/workSubmit/{id}"] = monitor.NewUpdateWorkSubmit(o.context, o.MonitorUpdateWorkSubmitHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *HealthyAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *HealthyAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *HealthyAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *HealthyAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *HealthyAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
