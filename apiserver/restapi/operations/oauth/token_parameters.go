// Code generated by go-swagger; DO NOT EDIT.

package oauth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TokenMaxParseMemory sets the maximum size in bytes for
// the multipart form parser for this operation.
//
// The default value is 32 MB.
// The multipart parser stores up to this + 10MB.
var TokenMaxParseMemory int64 = 32 << 20

// NewTokenParams creates a new TokenParams object
// with the default values initialized.
func NewTokenParams() TokenParams {

	var (
		// initialize parameters with default values

		grantTypeDefault = string("password")
	)

	return TokenParams{
		GrantType: grantTypeDefault,
	}
}

// TokenParams contains all the bound params for the token operation
// typically these are obtained from a http.Request
//
// swagger:parameters Token
type TokenParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*认证类型
	  Required: true
	  In: formData
	  Default: "password"
	*/
	GrantType string
	/*密码
	  Required: true
	  In: formData
	*/
	Password string
	/*参数
	  In: formData
	*/
	Scope []string
	/*用户名
	  Required: true
	  In: formData
	*/
	Username string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewTokenParams() beforehand.
func (o *TokenParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(TokenMaxParseMemory); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	fdGrantType, fdhkGrantType, _ := fds.GetOK("grant_type")
	if err := o.bindGrantType(fdGrantType, fdhkGrantType, route.Formats); err != nil {
		res = append(res, err)
	}

	fdPassword, fdhkPassword, _ := fds.GetOK("password")
	if err := o.bindPassword(fdPassword, fdhkPassword, route.Formats); err != nil {
		res = append(res, err)
	}

	fdScope, fdhkScope, _ := fds.GetOK("scope")
	if err := o.bindScope(fdScope, fdhkScope, route.Formats); err != nil {
		res = append(res, err)
	}

	fdUsername, fdhkUsername, _ := fds.GetOK("username")
	if err := o.bindUsername(fdUsername, fdhkUsername, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindGrantType binds and validates parameter GrantType from formData.
func (o *TokenParams) bindGrantType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("grant_type", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("grant_type", "formData", raw); err != nil {
		return err
	}
	o.GrantType = raw

	return nil
}

// bindPassword binds and validates parameter Password from formData.
func (o *TokenParams) bindPassword(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("password", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("password", "formData", raw); err != nil {
		return err
	}
	o.Password = raw

	return nil
}

// bindScope binds and validates array parameter Scope from formData.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *TokenParams) bindScope(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvScope string
	if len(rawData) > 0 {
		qvScope = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	scopeIC := swag.SplitByFormat(qvScope, "")
	if len(scopeIC) == 0 {
		return nil
	}

	var scopeIR []string
	for _, scopeIV := range scopeIC {
		scopeI := scopeIV

		scopeIR = append(scopeIR, scopeI)
	}

	o.Scope = scopeIR

	return nil
}

// bindUsername binds and validates parameter Username from formData.
func (o *TokenParams) bindUsername(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("username", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("username", "formData", raw); err != nil {
		return err
	}
	o.Username = raw

	return nil
}
